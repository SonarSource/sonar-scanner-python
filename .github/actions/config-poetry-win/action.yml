---
name: Configure Poetry for Windows
description: GitHub Action to configure a poetry project for windows runner

inputs:
  poetry-version:
    description: The version of poetry to install
    default: 2.2.1
  poetry-virtualenvs-path:
    description: Path to the Poetry virtual environments, relative to GitHub workspace. The folder is cached only if it is a subdirectory of
      `poetry-cache-dir`.
    default: .cache/pypoetry/virtualenvs
  poetry-cache-dir:
    description: Path to the Poetry cache directory, relative to GitHub workspace.
    default: .cache/pypoetry
outputs:
  BUILD_NUMBER:
    description: The build number, incremented or reused if already cached
    value: ${{ steps.get_build_number.outputs.BUILD_NUMBER }}

runs:
  using: composite
  steps:
    - name: Set build parameters
      shell: bash
      env:
        ARTIFACTORY_READER_ROLE: private-reader
      run: |
        echo "ARTIFACTORY_READER_ROLE=${ARTIFACTORY_READER_ROLE}" >> "$GITHUB_ENV"
    - uses: SonarSource/ci-github-actions/get-build-number@v1
      id: get_build_number
    - name: Cache local Poetry cache
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        path: ${{ inputs.poetry-cache-dir }}
        key: poetry-${{ runner.os }}-${{ hashFiles('poetry.lock') }}
        restore-keys: poetry-${{ runner.os }}-
    - name: Vault
      id: secrets
      uses: SonarSource/vault-action-wrapper@320bd31b03e5dacaac6be51bbbb15adf7caccc32 # 3.1.0
      with:
        secrets: |
          development/artifactory/token/{REPO_OWNER_NAME_DASH}-${{ env.ARTIFACTORY_READER_ROLE }} access_token | ARTIFACTORY_ACCESS_TOKEN;
    - name: Install JFrog
      id: install_jfrog
      shell: pwsh
      run: |
        Start-Process -Wait -Verb RunAs powershell '-NoProfile iwr https://releases.jfrog.io/artifactory/jfrog-cli/v2-jf/[RELEASE]/jfrog-cli-windows-amd64/jf.exe -OutFile $env:SYSTEMROOT\system32\jf.exe'
        jf intro
    - name: Install Poetry
      id: install_poetry
      shell: bash
      run: |
        pip install poetry==${{ inputs.poetry-version }}
    - name: Config Poetry
      id: config
      shell: bash
      env:
        ARTIFACTORY_URL: https://repox.jfrog.io/artifactory
        ARTIFACTORY_PYPI_REPO: sonarsource-pypi
        ARTIFACTORY_ACCESS_TOKEN: ${{ fromJSON(steps.secrets.outputs.vault).ARTIFACTORY_ACCESS_TOKEN }}
        POETRY_VIRTUALENVS_PATH: ${{ github.workspace }}/${{ inputs.poetry-virtualenvs-path }}
        POETRY_CACHE_DIR: ${{ github.workspace }}/${{ inputs.poetry-cache-dir }}
      run: |
        echo "POETRY_VIRTUALENVS_PATH=${POETRY_VIRTUALENVS_PATH}" >> "$GITHUB_ENV"
        echo "POETRY_CACHE_DIR=${POETRY_CACHE_DIR}" >> "$GITHUB_ENV"
        ${GITHUB_ACTION_PATH}/../../scripts/config-poetry.sh

