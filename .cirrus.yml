env:
  ARTIFACTORY_URL: VAULT[development/kv/data/repox data.url]
  ARTIFACTORY_PRIVATE_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  ARTIFACTORY_DEPLOY_USERNAME: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer username]
  ARTIFACTORY_DEPLOY_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer access_token]
  ARTIFACTORY_DEPLOY_REPO: sonarsource-pypi-public-qa
  GITHUB_TOKEN: VAULT[development/github/token/licenses-ro token]
  SONAR_TOKEN: VAULT[development/kv/data/next data.token]
  SONAR_HOST_URL: https://next.sonarqube.com/sonarqube
  DEPLOY_PULL_REQUEST: 'true'
  POETRY_VIRTUALENVS_PATH: "~/.cache/poetry/venvs"
  POETRY_CACHE_DIR: "~/.cache/poetry/pypoetry"
  SONARQUBE_VERSION: 25.3.0.104237

only_if: $CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == "" && ($CIRRUS_PR != "" || $CIRRUS_BRANCH == 'master' || $CIRRUS_BRANCH =~ "branch-.*")
container_definition: &CONTAINER_DEFINITION
  dockerfile: .cirrus/poetry.Dockerfile
  cluster_name: ${CIRRUS_CLUSTER_NAME}
  region: eu-central-1
  namespace: default
  builder_role: cirrus-builder
  builder_image: docker-builder-v*
  builder_instance_type: t3.small
  use_in_memory_disk: true
  docker_arguments:
    CIRRUS_AWS_ACCOUNT: ${CIRRUS_AWS_ACCOUNT}
  cpu: 3
  memory: 8G

poetry_cache_template: &POETRY_CACHE
  poetry_cache:
    folder: ~/.cache/poetry/
    fingerprint_script: cat poetry.lock 

.poetry_template: &POETRY_TEMPLATE
  eks_container:
    <<: *CONTAINER_DEFINITION
  <<: *POETRY_CACHE
  poetry_install_script:
    - source set_poetry_build_version "$CI_BUILD_NUMBER"
    - echo "PROJECT_VERSION=$PROJECT_VERSION" >> $CIRRUS_ENV
    - jfrog config add repox --artifactory-url "$ARTIFACTORY_URL" --access-token "$ARTIFACTORY_PRIVATE_ACCESS_TOKEN"
    - jfrog poetry-config --server-id-resolve repox --repo-resolve sonarsource-pypi
    - jfrog poetry install --build-name="$CIRRUS_REPO_NAME" --build-number="$CI_BUILD_NUMBER"

mend_scan_task:
  <<: *POETRY_TEMPLATE
  depends_on:
    - build
  # run only on master and long-living branches
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == "" && ($CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH =~ "branch-.*")
  eks_container:
    image: ${CIRRUS_AWS_ACCOUNT}.dkr.ecr.eu-central-1.amazonaws.com/base:j21-latest
    region: eu-central-1
    cluster_name: ${CIRRUS_CLUSTER_NAME}
    namespace: default
    cpu: 4
    memory: 2G
  env:
    WS_APIKEY: VAULT[development/kv/data/mend data.apikey]
  mend_script:
    - source cirrus-env QA
    - source ws_scan.sh
  allow_failures: "true"
  always:
    ws_scan_artifacts:
      path: "whitesource/**/*"

formatting_task:
  <<: *POETRY_TEMPLATE
  alias: formatting
  name: "Formatting"
  formatting_script:
    - poetry run black src/ tests/ --check
    - poetry run licenseheaders -t license_header.tmpl -o "SonarSource SA" -y 2011-2024 -n "Sonar Scanner Python" -E .py -d src/
    - poetry run licenseheaders -t license_header.tmpl -o "SonarSource SA" -y 2011-2024 -n "Sonar Scanner Python" -E .py -d tests/
    - git diff --name-only --exit-code ./src ./tests

analysis_task:
  <<: *POETRY_TEMPLATE
  alias: analysis
  name: "NEXT Analysis"
  analysis_script:
    - poetry run pytest --cov-report=xml:coverage.xml --cov-config=pyproject.toml --cov=src --cov-branch tests
    - uv venv
    - source .venv/bin/activate
    - uv pip install pysonar-scanner
    - . .cirrus/analysis.sh
  always:
    pytest_artifacts:
      path: "coverage.xml"
      format: junit
      type: text/xml

qa_task:
  alias: qa
  matrix:
    - name: "Test Python 3.9"
      eks_container:
        docker_arguments:
          PYTHON_VERSION: 3.9.18
    - name: "Test Python 3.10"
      eks_container:
        docker_arguments:
          PYTHON_VERSION: 3.10.13
    - name: "Test Python 3.11"
      eks_container:
        docker_arguments:
          PYTHON_VERSION: 3.11.7
    - name: "Test Python 3.12"
      eks_container:
        docker_arguments:
          PYTHON_VERSION: 3.12.1
    - name: "Test Python 3.13"
      eks_container:
        docker_arguments:
          PYTHON_VERSION: 3.13.2
  <<: *POETRY_TEMPLATE
  qa_script:
    - poetry run pytest tests/

build_task:
  <<: *POETRY_TEMPLATE
  alias: build
  name: "Build"
  build_script: regular_poetry_build_publish

its_task:
  name: "Integration Tests"
  alias: its
  sonarqube_cache:
    folder: sonarqube_cache/
    populate_script: mkdir -p sonarqube_cache && wget -q https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-$SONARQUBE_VERSION.zip -O sonarqube_cache/sonarqube.zip
    fingerprint_script: echo "sonarqube-$SONARQUBE_VERSION"
  <<: *POETRY_TEMPLATE
  its_script:
    - unzip -q sonarqube_cache/sonarqube.zip -d sonarqube
    - cd $(ls -d sonarqube/*/)
    - ./bin/linux-x86-64/sonar.sh start
    - cd -
    - jfrog poetry-config --server-id-resolve repox --repo-resolve sonarsource-pypi
    - jfrog poetry install
    - unset SONAR_TOKEN
    - unset SONAR_HOST_URL
    - poetry run pytest --its tests/its 

promote_task:
  depends_on:
    - formatting
    - analysis
    - qa
    - build
    - its
  env:
    ARTIFACTORY_PROMOTE_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promoter access_token]
    GITHUB_TOKEN: VAULT[development/github/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promotion token]
  <<: *POETRY_TEMPLATE
  promote_script: cirrus_promote
